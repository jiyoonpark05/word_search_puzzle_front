/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 public/models/Bunny.gltf -o app/components/three/Bunny.tsx -r public 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { bunnyState, senarioState } from "../../recoil/atoms";
import { useRecoilState } from "recoil";
import { AnimationAction, AnimationClip } from "three";

type GLTFResult = {
  nodes: Record<string, THREE.Mesh>;
  materials: Record<string, THREE.MeshStandardMaterial>;
  animations: AnimationClip[];
};
export function Bunny(props: any) {
  const [state, setState] = useRecoilState(bunnyState);
  const [senario, setSenario] = useRecoilState(senarioState);

  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = (useGLTF(
    "/models/Bunny.gltf"
  ) as unknown) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    let cleanupFunction: () => void; // Define the cleanup function variable

    switch (state) {
      case "default":
        actions["Idle"]?.reset().fadeIn(0.5).play();
        cleanupFunction = () => actions["Idle"]?.fadeOut(0.5); // Assign the cleanup function
        break;

      // say Hi when it clicked
      case "greeting":
        if (actions["Idle"]) {
          actions["Idle"].reset().fadeIn(0.5).stop();
        }
        actions["Wave"]?.reset().fadeIn(0.5).play();
        if (senario === 0) setSenario(1);
        setTimeout(() => {
          actions["Wave"]?.reset().fadeOut(0.5).stop();
          setState("default");
        }, 1500);
        cleanupFunction = () => actions["Wave"]?.fadeOut(0.5);
        break;

      case "askName":
        actions["Idle"]?.reset().fadeIn(0.5).stop();
        actions["Weapon"]?.reset().fadeIn(0.5).play();
        setTimeout(() => {
          actions["Weapon"]?.reset().fadeOut(0.5).stop();
          setState("default");
        }, 800);
        cleanupFunction = () => actions["Weapon"]?.fadeOut(0.5);
        break;

      default:
        cleanupFunction = () => {};
        break;
    }
  }, [state, senario, actions]);

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onClick={(e) => setState("greeting")}
    >
      <group name="Scene">
        <group name="CharacterArmature">
          <primitive object={nodes.Root} />
          <group name="Bunny">
            <skinnedMesh
              name="Cube074"
              geometry={nodes.Cube074.geometry}
              material={materials.Bunny_Main}
              skeleton={(nodes.Cube074 as any).skeleton}
            />
            <skinnedMesh
              name="Cube074_1"
              geometry={nodes.Cube074_1.geometry}
              material={materials.Bunny_Secondary}
              skeleton={(nodes.Cube074_1 as any).skeleton}
            />
            <skinnedMesh
              name="Cube074_2"
              geometry={nodes.Cube074_2.geometry}
              material={materials.Eye_Black}
              skeleton={(nodes.Cube074_2 as any).skeleton}
            />
            <skinnedMesh
              name="Cube074_3"
              geometry={nodes.Cube074_3.geometry}
              material={materials.Eye_White}
              skeleton={(nodes.Cube074_3 as any).skeleton}
            />
          </group>
          <group name="Carrot">
            <skinnedMesh
              name="Cube077"
              geometry={nodes.Cube077.geometry}
              material={materials["Material.024"]}
              skeleton={(nodes.Cube077 as any).skeleton}
            />
            <skinnedMesh
              name="Cube077_1"
              geometry={nodes.Cube077_1.geometry}
              material={materials["Material.011"]}
              skeleton={(nodes.Cube077_1 as any).skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Bunny.gltf");
